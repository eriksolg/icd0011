Spring Boot, Spring Data, Rest Repositories

1. Tehke Idea-s uus Spring Boot-i projekt:
   
   File -> New -> Project... -> Spring Initializr

   Lisage projekti järgmised tehnoloogiad:
   
     Developer tools     
       Lombok
       Spring Boot DevTools
     Web
       Spring Web
       Rest Repositories
     SQL  
       Spring Data JDBC
       HyperSql Database
     I/O
       Validation

2. Lisage rakendusse Spring Mvc controller ja veenduge, et see töötab.

   @RestController
   public class ItemController {

      @GetMapping("hello")
      public String hello() {
          return "Hello!";
      }

   }
   
   Muutke tagastatavat väärtust ja vajutage Ctrl+F9. Veenduge, et rakendus 
   ennast uuendas.

3. Lisage rakendusele andmebaasi skeem ja näidisandmed.

   Selleks looge fail schema.sql ja pange see resources kataloogi. 
   
   Skeemi näide on toodud selle teksti lõpus.

4. Tehke Dto klass skeemis toodud item tabeli andmete jaoks.

   @Data
   public class Item {
       @Id
       private Long id;
       private String text;
       private boolean done;
   }
   
   Kuna siin kasutatakse Lombok-i annotastsiooni @Data peate Idea-s 
   annotatsioonide töötluse sisse lülitama.
   
5. Tehke Repository, mille kaudu andmeid baasist välja küsida.

   Selleks peate looma vaid liidese:
   
   public interface ItemRepository extends CrudRepository<Item, Long> {}

6. Lisage kontrollerisse meetod andmete väljastamiseks "api/items".

7. Lisage kontrollerisse meetod ühe kirje väljastamiseks "api/items/<item id>".

   Kui vastava id-ga kirjet ei leita, siis tagastage http kood 404.
   
   Koodi saab tagastada visates erindi:
   
     throw new ResponseStatusException(HttpStatus.NOT_FOUND)
   
   Vea haldamiseks on allolev meetod:
     
   @ExceptionHandler
   public ResponseEntity<Void> handle(ResponseStatusException e) {
       return new ResponseEntity<>(null, e.getStatus());
   }
     
8. Lisage ülesande tehtuks märkimise võimalus.

   POST päring aadressile api/items/<item id>/mark-as-done peaks ülesande 
   "done" välja tõeseks märkima.
   
   Olemi muutmiseks baasis peaks tegema repository liidesesse meetodi signatuuri, 
   millel on järgmine annotatsioon:
   
   @Query("update item i set i.done = true where i.id =:id").
   
   Lisaks peab lisama annotatsiooni @Modifying.
   
   Meetodi parameetri peaks märgistama annotatsiooniga @Param("id").
   
9. Lisage rakendusele kirje salvestamise võimalus koos valideerimisega.

    Valideerimise reegel on see, et tekst peab olema 2 kuni 10 märki.
    
    Valideerimiseks kasutage JSR303 annotatsioone (@Valid, @Size ja @NotNull)
    
    Kui kirje ei valideeru peaks tagastatama http koodi 400.
    
    Selleks tuleb kontrollerisse meetod:
    
    @ExceptionHandler
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public void handleValidationExceptions(MethodArgumentNotValidException ex) {
    }

10. Rakenduse taaskäivitades on kõik muutused kadunud, kuna need andmeid 
    hoitakse rakenduse mälus.

    Laadige alla lehelt http://mvnrepository.com/ Hsql-i jar fail ja käivitage 
    käsurealt Hsql-i server.
    
       java -cp <jar-i asukoht> org.hsqldb.Server -silent false -database.0 mem:db1 -dbname.0 db1
    
    Nüüd on server kätte saadav aadressilt jdbc:hsqldb:hsql://localhost:9001/db1.
    
    Ühenduge baasiga läbi Idea.
    
    Pange rakendus kasutama sedasama andmebaasi. Selleks peate kirjutama    
    faili application.properties järgmise info:
    
    spring.datasource.url=jdbc:hsqldb:hsql://localhost:9001/db1

    Nüüd on konsoolist, kust andmebaasi serveri käivitasite näha ka kõik 
    päringud, mida rakendus teeb.    

11. Lisage rakendusele sõltuvus

    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    
    Kontrollige, et see töötab tehes päringu aadressile http://localhost:8080/v3/api-docs
    
    Lisage rakendusele sõltuvus
    
    implementation 'io.springfox:springfox-swagger-ui:3.0.0'
    
    Nüüd peaks seesama info olema näha inimloetaval kujul:
    
    http://localhost:8080/swagger-ui/
    
    Uurige, milliseid päringuid rakendus lubab.
    
    Kontrollige, et sisendi valideerimise info on dokumentatsioonist näha.
    
    "Example Value / Schema" linkide juurest valige "Schema".
    
12. Kasutades Swagger UI-d muutke ära mingi kirje tekst (PATCH päring).

13. Lisage ItemRepository liiesesse signatuur.

    Iterable<Item> findByTextContainingIgnoreCase(String searchString);

    Kontrollige Swagger UI abil, et rakendusele tekkis vastav aadress ja 
    selle kaudu saab päringu teha.


Seletused ja lahendused: https://youtu.be/DKjE_QYP3b8


schema.sql
------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS item (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 10) PRIMARY KEY,
    text VARCHAR(255) NOT NULL,
    done boolean
);

-- do not add data if it is already added.

MERGE INTO item
   USING (VALUES 1) data (id) ON (item.id = data.id)
   WHEN NOT MATCHED THEN INSERT VALUES (1, 'Write an e-mail', false);

MERGE INTO item
   USING (VALUES 2) data (id) ON (item.id = data.id)
   WHEN NOT MATCHED THEN INSERT VALUES (2, 'Call Alice', false);

MERGE INTO item
   USING (VALUES 3) data (id) ON (item.id = data.id)
   WHEN NOT MATCHED THEN INSERT VALUES (3, 'Call Bob', false);

------------------------------------------------------------------------

