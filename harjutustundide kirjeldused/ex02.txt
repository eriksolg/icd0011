Projekti ehitamine

1. Kompileerige fail Hello.java käsurealt. Tehke uus fail alloleva sisuga.

   --------------- Hello.java ------------------------------------------

   public class Hello {
       public static void main(String[] args) {
           System.out.println("Hello!");
       }
   }

   ---------------------------------------------------------------------

   Käivitage kompileeritud fail käsurealt.
   
   Kompileerige fail Hello2.java käsurealt.
   
   --------------- Hello2.java -----------------------------------------
   
   import org.apache.commons.lang3.StringUtils;

   public class Hello2 {
   
       public static void main(String[] args) {
           String joined = StringUtils.join(
                   new String[] {"Hello", "world!"}, ", ");
           System.out.println(joined);
       }
   }
   
   ---------------------------------------------------------------------
   
   Hello2 kompileerimiseks on vaja välist teeki Apache Commons Lang,
   mille saab lehelt http://mvnrepository.com/. Otsifraasiks on "commons lang 3".
   
   Laadige teegist viimane versioon alla ja lisage oma projekti juurde.
   
   Käivitage kompileeritud fail käsurealt.
   Ka käivitamisel on vaja sõltuvusele viidata.   

2. Aadressilt https://enos.itcollege.ee/~makalm/icd0011/build-ex-files.zip 
   leiate ühe projekti failid ja Gradle wrapper-i. Viimane on 
   vajalik selleks, kui teil oma arvutis Gradle puudub.

   Mac-i puhul peate peale failide lahtipakkimist andma gradlew skriptile 
   käivitamise õiguse.
   
      > chmod u+x gradlew  # olles samas kataloogis, kus gradlew skript ise.
   
   Ehitage Gradle abil jar fail, mida oleks võimalik käivitada nii:
   
      > java -jar myapp.jar
      
   Vajalikud on järgmised sammud.
      
   a) Genereerige kataloogistruktuur ja build.gradle fail.
   
      > gradlew init         # (mac-i peal on "gradlew" asemel "./gradlew")
      
      tehke järgmised valikud: application, Java, Groovi, 
                               JUnit Jupiter, <vaikeväärtus>, <vaikeväärtus>.

   b) Kopeerige failid just genereeritud kataloogidesse sobivale kohale.
   
   c) Kompileerige kood

      build.gradle faili peaksite lisama kirje.

      dependencies {
          implementation fileTree(include: ['*.jar'], dir: 'lib')
      }
   
   d) Käivitage rakendus läbi Gradle.
   
      build.gradle faili peaksite kirjutama.
   
      task runMyCode(type: JavaExec) {
         main = '<klassi nimi koos paktetidega. nt. mypackage.MyClass>'
   
         classpath = sourceSets.main.runtimeClasspath
      }

      Käivitage kood läbi Gradle: gradlew runMyCode
   
   e) Koostage jar pakk ja käivitage rekendus pakist (java -jar myapp.jar).

      build.gradle faili peaksite lisama kirje.
      
      jar {
          manifest {
              attributes 'Main-Class': '<klassi nimi koos paktetidega. nt. mypackage.MyClass>'
          }
      
          duplicatesStrategy DuplicatesStrategy.EXCLUDE
      
          from(configurations.runtimeClasspath.collect
                  { it.isDirectory() ? it : zipTree(it) })
      }

   Paki koostab käsk.
 
   > gradle jar
   
   Paki leiate kataloogist build/libs.

3. Looge IDEA-ga uus Gradle'i project: File -> New -> Project -> 
   valige Gradle Project -> Next -> täitke vajalikud väljad -> Finish.

4. Lisage projekti üks Java klass.
   
   Kompileerige ja paketeerige läbi IDEA: paremast äärest "Gradle projects" 
      -> Tasks -> build -> build

      Veenduge, et tekkis class fail (build/classes/.. kataloog)

5. Lisage projektile sõltuvus teegist Apache Commons Lang.
   http://mvnrepository.com lehelt leiate info mida faili gradle.build kirjutada.
   
   Veenduge, et IDEA vastlisatud sõltuvusest teab:
   Projekti aknast "External Libraries" peaks seda näitama.
   Kastutage lisatud teegi meetodit StringUtils.join() java koodist.
   
   Selleks tehke üks klass main() meetodiga, mille kehas liitke stringid kokku 
   ja trükkige konsooli.
   
6. Pange Commons-i teegi versioon muutujasse. Info loengu slaidilt.

   Kontrollige, et projekt jäi tööle: gradlew clean build

   Muutke muutujast versiooni ja veenduge, et ka IDEA sellest muutusest 
   teadlik on: Projekti aknast "External Libraries" peaks uut versiooni näitama.

7. Määrake build.gradle failis Java versiooniks 8.
   
   sourceCompatibility = 8
   
   Veenduge, et allolev rida ei kompileeru.
   
   var x = 1;
   
   Muutke versioon tagasi 11-ks ja veenduge, et siis kompileerub.

8. Lisage projektile Gretty plugin, et projekti saaks veebiserveris käivitada.
 
   Kirjutage build.gradle failis "plugins" plokki:
   
     id 'org.gretty' version '3.0.3'
     
   Nüüd peaks Gradle aknasse tekkima Tasks -> gretty kataloog.
   
   Valige sealt "appRun"
   
   Käivitamine peaks ebaõnnestuma (käivitamiseks vajalikku serverit ei 
   leita antud repositooriumist).
   
   Kirjutage build.gradle failis "repositories" plokki mavenCentral() 
   asemel jcenter() ja käivitage uuesti. Nüüd peaks server käivituma.
   
   Väljundis teatatakse, et serveriks on "Jetty 9.4. ..." ja rakenduse 
   aadress on http://localhost:8080/<projekti nimi>
   
   Lisage build.gradle faili plokk:
   
   gretty {
     contextPath = '/'
   }   

   Kui serveri taaskäivitate peaks väljundis teatatama, rakenduse aadress
   on http://localhost:8080/ ehk rakenduse aadressiks on serveri juurkataloog.

Seletused ja lahendused: https://youtu.be/6CIe1UKe44c
