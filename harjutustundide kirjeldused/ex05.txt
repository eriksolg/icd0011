Jdbc (vol 2)

Kloonige https://bitbucket.org/mkalmo/icd0011jdbc2 repo ja importige see IDE-sse.

Datatables (https://datatables.net/) on jQuery pistikprogramm, mis 
näitab andmeid tabeli kujul. See toetab lehekülgedeks jaotamist, otsingut 
ja sorteerimist.

Toorikus on olemas JavaScripti rakendus, mis seda pistikprogrammi kasutab.
Teie ülesanne on teha programmile tagarakendus (back-end).

Rakendus on näha pärast serveri käivitamist aadressilt http://localhost:8080/.

1. Sisestage andmebaasi vajalik tabel (failis schema.sql). Tabeli võite 
   sisestada läbi Idea või Java koodi kaudu.
   
   Koodist baasiga ühendumise näide on failis Tester.java.
   
   Andmebaasi info asub failis application.properties ja selles, peate 
   tegema vastavad muudatused. Baasi nime, kasutaja ja salasõna 
   leiate eelmise harjutustunni ülesande juurest.
   
2. Sisestage tabelisse mõned näidisandmed. Näidisandmed on failis us-sample-data.csv
   ja nende andmete lugemise näide on failis ReadCsvExample.java.

3. Klassis EmployeeServlet on näide selle kohta, millisel kujul rakendus 
   andmeid ootab. Praegu saadetakse fikseeritud andmeid.
   
   Tehke EmployeeDao klassi meetod, mis küsib andmebaasist kõik kirjed 
   ja tagastab need fikseeritud kirjete asemel.

   Dao meetodeid on soovitatav testida väljaspool veebirakendust.
   Nt. läbi klassi Tester.java.

4. Kui klikkida brauseris tabeli veerul, peaks andmed sorteeritama selle 
   veeru järgi. Info, millise veeru järgi sorteerida saate nii:
   
   DataTableParams params = readParameters(request);
   
   Integer colNr = params.getOrderColumnNr();

   Kasutage seda infot sql päringu koostamisel: ORDER BY <colNr + 1>.
   
   Seda infot ei saa päringusse parameetriga määrata ja siin peame 
   päringu tükkidest kokku liitma. Kindlasti peab kontrollima/tagama, et 
   väärtuseks on number.

5. Kui klikkida brauseris tabeli veerul teist korda, peaks andmed sorteeritama 
   kahanevas järjekorras. 

   Info, järjekorra kohta saate nii:
   
   String direction = params.getOrderDirection(); // null, "asc" või "desc"

   Kasutage seda infot sql päringu koostamisel: ORDER BY <colNr + 1> <direction>.

   Seda infot ei saa päringusse parameetriga määrata ja siin peame 
   päringu tükkidest kokku liitma. Kindlasti peab tagama, et
   päringusse saab kirja vaid "asc" või "desc" (mitte nt. ";DROP TABLE ..").

6. Korraga peaks välja näidatama vaid kindlat hulka kirjeid. 

   Kui palju korraga näidata: params.getPageLength();
   Millisest kirjest alates: params.getPageStart();

   Kasutage seda infot päringus: "LIMIT ? OFFSET ?". Väärtused saab anda 
   päringu parameetritena.
   
   Tabeli all on lehekülje valimise lingid. Mitme lehe jaoks linke 
   kuvatakse on määratud kirjete koguarvuga. 
   
   Seega tagastame vaid lehekülje jagu kirjeid aga lisaks peaksime ütlema, 
   kui palju kirjeid üldse on. Selle info saame tagastada väljal 
   ResponseData.recordsFiltered. 
   
   Kirjete koguarvu saaksime küsida eraldi päringuga aga PostgreSql võimaldab 
   küsida kirjete kogu arvu (arvestamata LIMIT piirangut) sama päringuga nii:
   
   "select id, firstName, ... , count(*) over() as count from employee".
   
   Info: https://www.postgresql.org/docs/current/tutorial-window.html

7. Tabeli juures on ka otsingu kast. Sellesse kirjutatud info saab kätte nii:

   params.getSearchString();
   
   Kasutage seda infot päringu koostamisel "WHERE first_name like ?".
   
   Piisab, kui otsite vaid eesnimest.

8. Nüüd on keerulisem osa tehtud teha jääb vaid:

   id järgi kirje küsimine;
   id järgi kirje kustutamine;
   uue kirje sisestamine (POST);
   olemasoleva kirje muutmine (PUT).
   
Seletused ja lahendused: https://youtu.be/eXioZacXTcI
