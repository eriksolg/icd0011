Servlet

1. Kloonige https://bitbucket.org/mkalmo/icd0011servlet repo ja avage see IDE-s.

2. Kasutage ObjectMapper-it Java objektide konverteerimiseks Json-iks ja 
   tagasi. Klassis json.JsonConverter on selle tööga alustatud.

   Hiljem on plaanis ObjectMapper-it veebirakenduse sees kasutada aga 
   kõigepealt võiks selle kasutamise eraldi läbi proovida.

3. Käivitage veebiserver ja veenduge projektis olev HelloServlet, et see 
   vastab (http://localhost:8080/hello).

   Gradle sakk paremas ääres -> Tasks -> gretty -> appRun
   
   (või appStart, kui appRun ei toimi)

4. Paigaldage Postman Chrome app või mõni muu Http klient.

5. Lisage HelloServlet-ile doPost meetod. Postitage sinna mingi sisend 
   ja veenduge, et see kohale jõuab.
   
   Postitamiseks kasutage nt. Postman-i. Sisendit saab lugeda nii:
   
   String input = Util.readStream(request.getInputStream()).
                  (klass Util on projektiga kaasas)   
   
6. Veenduge, et teil õnnestub Json formaadis sisendit servletile saata 
   ja vastusena tagasi saada.

   a) Saatke Postman-ist päring, mille sisuks on Json kood.
      Määrake ka vastav Content-Type.
   
   b) Lugege Servletist päringu sisu ja teisendage see Java objektiks.
      Vajalik on vastavate väljadega Java objekti, milles Json-ist tulnud 
      infot hoida.
   
   c) Muutke sisendist saadud Java objektil mõne välja väärtust ja teisendage 
      muudetud objekt Json-iks tagasi.
   
   d) Saatke Json kliendile tagasi. Määrake ka vastav Content-Type.

7. Looge listener, mis teatab rakenduse käivitamisest.

8. Looge listener-is instants klassist Post ja tehke see HelloServlet-ile 
   kättesaadavaks. Seda saate teha kasutades ServletContext-i setAttribute() 
   meetodit.

9. Looge uus servlet nimega OtherServlet ja jätke sellelt ära @WebServlet 
   annotatsioon. Seega käivitamisel seda servlet-i automaatselt ei laeta.

   Tehke loodud servlet-ist uus instants ja registreerige see manuaalselt.
   
   Seda saate teha eelmises punktis loodud listener klassi abil.
   
   sce.getServletContext().addServlet("<nimi>", <servlet-i instants>)
   
   Meetod addServlet() tagastab objekti mille abil saab määrata mis on 
   uue servlet-i aadressiks (addMapping() meetod).
   
10. Lisage Post klassile Lombok teegi abil setter-id ja getter-id.
   
   Sõltuvusteks build.gradle failis on:
   
      compileOnly 'org.projectlombok:lombok:1.18.12'
      
      annotationProcessor 'org.projectlombok:lombok:1.18.12'

   Et IDEA Lombok-i teeki tunneks on vaja paigaldada IDEA Lombok plugin
   ja lubada annotatsioonide töötlus.
   
   a) File -> Settings -> Plugins -> Browse Repositories -> Lombok plugin -> Install
   
   b) File -> Settings ->  Build, .. -> Compiler -> Annotation Processors -> 
      linnuke "Enable annotation processing"
   
   Veenduge, et getterid/setterid on olemas.
   
   a) Kirjutage kood, mis kasutab teie tehtud klassi ja veenduge, et see 
      kompileerub IDEA-s.
      
   b) Veenduge, et kood kompileerub ka käsurealt:
   
        > gradlew build           # Windows
        > ./gradlew build         # Mac/Linux

   Lisage konstruktor kõigi argumentidega ja konstruktor ilma argumentideta 
   ja veenduge, et ka see töötab.

11. Uurige, kuidas Lombok teek baitkoodi muudab.

    Kompileerige kood Gradle abil.
    
    Gradle sakk paremas ääres -> Tasks -> build -> build.

    Projekti aknast otsige välja kompileeritud kood build/classes/java/main/model/Post.class
    ja avage see (topeltklõps). Dekompileeritud failist on näha, et 
    on lisanud hulk koodi, mida lähtekoodi failis ei ole.
    
    Lisage Post klassile annotatsioon @Builder kompileerige uuesti ja
    vaadake baitkoodi.
    
    Lisatud Builder klassi saate kasutada nii:
    
       Post order = Post.builder()
           .id(1L)
           .title("A")
           .build();
           
    Ehk see võimaldab meil ühe reaga objekti luua ja sellele valikuliselt 
    väärtusi anda.

12. Kontrollige koodi vastavust projekti stiilireeglitele.

    Stiilireeglid on projekti testide projektis: https://bitbucket.org/mkalmo/hwtests.

    a) Paigaldage PMD plugin.
    
    b) Määrake reeglite fail 
    
       Settings -> Other Settings -> PMD
       
       Seadete faili leiate projekti testide juurest /pmd/ruleset.xml.
       
    c) Käivitage kontroll
    
       Parem klõps kataloogil, mille sisu soovime kontrollida -> Run PMD -> 
       Custom Rules -> ruleset 

13. Proovige kasutada projekti teste HelloServlet-iga suhtlemiseks.
   https://bitbucket.org/mkalmo/hwtests (test Hw03.java)

   Testide projekti peaksite avama servleti projektist eraldi. Seega 
   peaksid mõlemad projektid korraga avatud olema.

   a) Veenduge, et servlet-i rakendus ei tööta ja pange käima esimene 
      (baseUrlResponds()) test. Test peaks ebaõnnestuma.
      
   b) Pange käima servlet-i rakendus ja käivitage esimene test.
      Test peaks õnnestuma.
      
   c) Määrake HelloServlet-i aadressiks "api/orders". 
      Lisage doPost() meetodisse rida, mis trükib saadetud sisendi 
      konsooli (System.out.println()).
      
      Pange käima servlet-i rakendus ja käivitage teine test.
      Vaadake servlet-i rakenduse konsoolist, mis info välja trükiti.

   d) Uurige lähemalt testi ja rakenduse omavahelist suhtulust.
      
      Kui kirjutate testi algusesse rida:
      
         enableLogging();
      
      siis näite, millist infot test saadab ja mida server vastab.
   
Seletused ja lahendused: https://youtu.be/hVwVUGZr9Yo
