
ctx.getBean(<x>.class) - Spring-ilt x tüüpi objekti küsimine.

@Repository ja @Service - Annotatsioonid, mis ütlevad Spring-ile, et tema peab märgistatud klassi tundma.

@ComponentScan(basePackages = {"service", "..."}) - Ütleb Spring-ile, et nendest pakkettidest tuleks bean-e otsida.

System.identityHashCode(x) - Ütleb objekti x identifikaatori. Kui kaks muutujat annavad sama tulemuse, siis viitavad nad samale objektile.

@Scope(BeanDefinition.SCOPE_PROTOTYPE) - ütleb, et sellest bean-ist tuleb iga kord uus koopia anda.

@PropertySource("classpath:/<faili nimi>") - viide välisele konfiguratsioonile, mis laetakse Environment objekti.

Baasist lugemine (select)

  var mapper1 = klass mis implementeerib RowMapper liidest.

  var mapper2 = new BeanPropertyRowMapper<>(<klass, milleks soovime tulemuse mappida>)

  new JdbcTemplate(<viide DataSource objektile>).query(sql, <mapper1 või mapper2>);

Baasi kirjutamine (insert)

  var data = new BeanPropertySqlParameterSource(<DTO objekt>);

   new SimpleJdbcInsert(<viide JdbcTemplate objektile>)
        .withTableName(<millisesse tabelisse>)
        .usingGeneratedKeyColumns(<id välja nimi>)
        .executeAndReturnKey(data);

Skeemi loomine ja näidisandmete sisestus

    var populator = new ResourceDatabasePopulator(
            new ClassPathResource("schema.sql"),
            new ClassPathResource("data.sql"));

    DatabasePopulatorUtils.execute(populator, dataSource);

@Profile("<profiili nimi>")
  Ütleb, et see konfiguratsioon või bean kehtib ainult nimetatud profiili jaoks.

@EnableAspectJAutoProxy - Luba AOP-d.

@Aspect - AOP element mis, milles olevat koodi võib dünaamiliselt liita muule koodile.

@Before("execution(* packagename.ClassName.*(..))") - tähistb meetodit, mis tuleb käivitada määratud enne määratud meetodite väljakutset.
